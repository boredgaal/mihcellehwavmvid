@namespace Mihcelle.Hwavmvid.Modules.Htmleditor
@inherits Modulebase

@using System.ComponentModel.DataAnnotations
@using Mihcelle.Hwavmvid.Modal
@using Mihcelle.Hwavmvid.Client.Modules

@inject IHttpClientFactory ihttpclientfactory
@inject NavigationManager navigationmanager
@inject Modalservice modalservice

<AuthorizeView Roles="@Mihcelle.Hwavmvid.Shared.Constants.Authentication.Hostrole">
    <Authorized>

        @if (this.editor != null && !string.IsNullOrEmpty(this.bytestring))
        {
            <div>

                <Modalcomponent ElementId="@this._htmleditormodalelementid">

                    <Modalheader>

                        <div class="bg-dark text-light text-center px-2 py-2">

                            <div class="lead py-2">
                                Htmleditor
                            </div>

                        </div>

                    </Modalheader>

                    <Modalbody>

                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                            <li class="nav-item" role="htmleditor">
                                <button class="nav-link active" id="html-tab" data-bs-toggle="tab" data-bs-target="#html" type="button" role="tab" aria-controls="html" aria-selected="true">html</button>
                            </li>
                            <li class="nav-item" role="htmleditor">
                                <button class="nav-link" id="assccii-tab" data-bs-toggle="tab" data-bs-target="#assccii" type="button" role="tab" aria-controls="assccii" aria-selected="false">assccii</button>
                            </li>
                        </ul>

                        <div class="tab-content">

                            <div class="tab-pane active" id="html" role="tabpanel" aria-labelledby="html-tab">

                                <div class="p-2 lead">

                                    <div>
                                        <strong><small>Edit html output</small></strong>
                                    </div>

                                    <textarea @bind="this.editor.Htmlstring" rows="14" cols="410" class="w-100" onclick="border border-dark"></textarea>

                                </div>

                            </div>

                            <div class="tab-pane" id="assccii" role="tabpanel" aria-labelledby="assccii-tab">

                                <div class="p-2 lead">

                                    <div>
                                        <strong><small>Edit html in bytes asscie format</small></strong>
                                    </div>

                                    <textarea @bind="this.bytestring" rows="14" cols="410" class="w-100" onclick="border border-dark"></textarea>

                                </div>

                            </div>

                        </div>

                    </Modalbody>

                    <Modalfooter>

                        <div class="float-end">

                            <button type="button" @onclick="async () => await this.Savechanges()" class="btn btn-sm btn-link">
                                Save changes
                            </button>

                            <button @onclick="(() => this.modalservice.HideModal(this._htmleditormodalelementid))" type="button" class="btn btn-sm btn-link">
                                Close editor
                            </button>

                        </div>

                    </Modalfooter>

                </Modalcomponent>

            </div>

            <div class="position-relative py-2" style="min-height: 140px;">

                <button @onclick="async() => await Opencontextmodule()" @onclick:stopPropagation=true type="button" class="btn btn-sm btn-link px-2 py-4 rounded-0" style="position: absolute; bottom: 4px; right: 4px;">
                    <small class="py-2">Edit html</small>
                </button>

                <div>@((MarkupString)this.editor.Htmlstring)</div>

            </div>
        }

    </Authorized>
</AuthorizeView>


@code {

    [Parameter] public Moduleservice<Modulepreferences> Moduleparams { get; set; }

    public string _htmleditormodalelementid { get; set; } = Guid.NewGuid().ToString();
    public Applicationhtmleditor? editor { get; set; }
    public string? bytestring { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (this.editor == null && !string.IsNullOrEmpty(this.Moduleparams.Preferences.ModuleId))
        {
            try
            {
                this.editor = new Applicationhtmleditor()
                {
                    Id = string.Empty,
                    Moduleid = this.Moduleparams.Preferences.ModuleId,
                    Htmlstring = string.Empty,
                    Createdon = DateTime.Now,
                };

                var client = this.ihttpclientfactory?.CreateClient("Mihcelle.Hwavmvid.ServerApi.Unauthenticated");
                this.editor = await client.GetFromJsonAsync<Applicationhtmleditor?>(string.Concat("api/htmleditor/", this.Moduleparams.Preferences.ModuleId));


                // asscii things || 10_backslash || 60_n || 1060_\n || 1088_\t || assccii chars &#010; &#nbsp;
                string tempbytestream = string.Empty;
                for (var y = 0; y < this.editor?.Htmlstring.Count(); y++)
                {
                    char asscciiitem = this.editor.Htmlstring.Skip(y).FirstOrDefault();
                    tempbytestream += Convert.ToByte(asscciiitem);
                    tempbytestream += "\\";
                }

                this.bytestring = tempbytestream;
                this.bytestring = this.bytestring?.Replace("1060", "\n");
                this.bytestring = this.bytestring?.Replace("8888", "\t");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        await base.OnParametersSetAsync();
    }

    public async Task Savechanges()
    {
        try
        {
            var client = this.ihttpclientfactory?.CreateClient("Mihcelle.Hwavmvid.ServerApi.Unauthenticated");
            await client.PostAsJsonAsync<Applicationhtmleditor?>("api/htmleditor", this.editor);
            this.navigationmanager.NavigateTo(navigationmanager.Uri, true);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }

    public async Task Opencontextmodule()
    {

        await this.modalservice.ShowModal(this._htmleditormodalelementid);

        await InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public class Applicationhtmleditor
    {
        public string Id { get; set; }
        public string Moduleid { get; set; }
        public string Htmlstring { get; set; }
        public DateTime Createdon { get; set; }
    }

}